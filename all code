<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Performance Prediction</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    <div id="title">
        <h1>Student Performance Prediction</h1>
    </div>
    <div id="form">
        <div id="form-container">
            <form id="prediction-form">
                <label for="name">Name:</label>
                <input type="text" id="name" name="name" autocomplete="name" required>
                <br>

                <label for="age">Age:</label>
                <input type="number" id="age" name="age" autocomplete="age" min="17" max="30" required>
                <br>

                <label for="year1_marks">First Year Marks:</label>
                <input type="number" id="year1_marks" name="year1_marks" min="0" max="100" autocomplete="year1_marks" required>
                <br>

                <label for="year2_marks">Second Year Marks:</label>
                <input type="number" id="year2_marks" name="year2_marks" min="0" max="100" autocomplete="year2_marks" required>
                <br>

                <label for="studytime">Study Time (hours):</label>
                <input type="number" id="studytime" name="studytime" min="0" max="18" autocomplete="studytime" required>
                <br>

                <label for="failures">Number of Failures:</label>
                <input type="number" id="failures" name="failures" min="0" max="5" autocomplete="failures" required>
                <br>

                <button type="submit" id="submit-button">Predict</button>
            </form>

            <!-- Display Prediction Result -->
            <div id="result">
                <p id="prediction-result"></p>
            </div>
        </div>
    </div>
    <script src="{{ url_for('static', filename='script.js') }}"></script>
</body>
</html>

body {
    font-family: Arial, sans-serif;
    background-color: #f5f5f5;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    margin: 0;
    padding: 20px;
    box-sizing: border-box;
}

#title {
    text-align: center;
    margin-bottom: 20px;
}

#form-container {
    background-color: #fff;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    width: 100%;
    max-width: 300px;
}

form label {
    display: block;
    margin-bottom: 5px;
}

form input {
    width: 100%;
    padding: 8px;
    margin-bottom: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
}

#submit-button {
    width: 100%;
    padding: 10px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

#submit-button:hover {
    background-color: #45a049;
}

#result {
    margin-top: 20px;
    text-align: center;
}

document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('prediction-form');
    const resultDiv = document.getElementById('result');
    const resultText = document.getElementById('prediction-result');

    form.addEventListener('submit', function (event) {
        event.preventDefault();
        resultText.textContent = "Processing...";

        const formData = new FormData(form);
        const jsonData = {};
        formData.forEach((value, key) => {
            jsonData[key] = key === 'name' ? value : Number(value);
        });

        fetch('/predict', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(jsonData),
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.prediction) {
                    resultText.textContent = `Predicted Final Marks: ${data.prediction}`;
                } else {
                    resultText.textContent = `Error: ${data.error}`;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                resultText.textContent = 'An error occurred while processing your request.';
            });
    });
});

import os
import warnings
import logging
from logging.handlers import RotatingFileHandler
from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
import numpy as np
import pandas as pd
from tensorflow.keras.models import load_model
import pickle
from dotenv import load_dotenv

# Suppress TensorFlow and other warnings
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
warnings.filterwarnings("ignore")

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
handler = RotatingFileHandler('app.log', maxBytes=10000, backupCount=1)
handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

logger.info("Starting application...")

app = Flask(__name__)
CORS(app)

# Load the trained model and scaler
model = None
scaler = None

def load_model_and_scaler():
    global model, scaler
    try:
        model = load_model('final_marks_predictor_model.h5')
        with open('scaler.pkl', 'rb') as f:
            scaler = pickle.load(f)
        logger.info("Model and scaler loaded successfully")
    except Exception as e:
        logger.error(f"Error loading model or scaler: {e}")

# Load model and scaler when the application starts
load_model_and_scaler()

def predict_new_input(age, year1_marks, year2_marks, studytime, failures):
    try:
        logger.info("Starting prediction...")
        logger.debug(f"Input values - Age: {age}, Year1 Marks: {year1_marks}, Year2 Marks: {year2_marks}, Study Time: {studytime}, Failures: {failures}")

        feature_names = ['age', 'year1_marks', 'year2_marks', 'studytime', 'failures']
        new_input_df = pd.DataFrame([[age, year1_marks, year2_marks, studytime, failures]], columns=feature_names)

        if model is None or scaler is None:
            logger.error("Model or scaler is not loaded.")
            return None
        
        new_input_scaled = scaler.transform(new_input_df)
        logger.debug(f"Scaled input: {new_input_scaled}")

        predicted_marks = model.predict(new_input_scaled, verbose=0)
        logger.info(f"Prediction successful: {predicted_marks[0][0]}")
        return predicted_marks[0][0]
    except Exception as e:
        logger.error(f"Error during prediction: {e}", exc_info=True)
        return None

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    try:
        logger.info(f"Received data: {request.json}")
        data = request.json
        if not data:
            return jsonify({'error': 'No JSON data received'}), 400

        age = int(data.get('age', 0))
        year1_marks = float(data.get('year1_marks', 0))
        year2_marks = float(data.get('year2_marks', 0))
        studytime = float(data.get('studytime', 0))
        failures = int(data.get('failures', 0))

        prediction = predict_new_input(age, year1_marks, year2_marks, studytime, failures)

        if prediction is None:
            logger.error("Prediction returned None.")
            return jsonify({'error': 'Prediction failed due to internal error.'}), 500
        
        rounded_prediction = round(float(prediction), 2)
        logger.info(f"Prediction result: {rounded_prediction}")
        return jsonify({'prediction': rounded_prediction})

    except Exception as e:
        logger.error(f"Error during prediction: {e}", exc_info=True)
        return jsonify({'error': 'Internal server error.'}), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    logger.info(f"Flask app starting on port {port}")
    app.run(host='0.0.0.0', port=port, debug=True)